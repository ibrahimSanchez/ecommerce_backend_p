// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model Product {
//   id              Int      @id @default(autoincrement())
//   title            String   @unique
//   reviews         Int
//   price           Float
//   discountedPrice Float

//   image           String?
//   createdAt       DateTime @default(now())
//   updatedAt       DateTime @updatedAt
// }

// model Product {
//   id              Int     @id @default(autoincrement())
//   title           String  @unique
//   reviews         Int
//   price           Decimal @db.Decimal(10, 2)
//   discountedPrice Decimal @db.Decimal(10, 2)

//   imgs      ProductImage[] // Ahora es una relación uno-a-muchos
//   createdAt DateTime       @default(now())
//   updatedAt DateTime       @updatedAt
// }

// model ProductImage {
//   id         Int      @id @default(autoincrement())
//   productId  Int
//   thumbnails String[]
//   previews   String[]
//   createdAt  DateTime @default(now())
//   updatedAt  DateTime @updatedAt

//   product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

//   @@unique([productId, id]) // Garantiza que cada imagen pertenece a un solo producto
// }

model Product {
  id              Int     @id @default(autoincrement())
  title           String  @unique
  reviews         Int
  price           Decimal @db.Decimal(10, 2)
  discountedPrice Decimal @db.Decimal(10, 2)

  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  imgs ProductImage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductImage {
  id         Int      @id @default(autoincrement())
  productId  Int
  thumbnails String[]
  previews   String[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Category {
  id       Int       @id @default(autoincrement())
  title     String    @unique
  products Product[]
}

// model Attribute {
//   id               Int                 @id @default(autoincrement())
//   name             String              @unique
//   values           AttributeValue[] // Relación uno a muchos con valores posibles
//   // categories       CategoryAttribute[] // Relación muchos a muchos con categorías
//   // ProductAttribute ProductAttribute[]
// }

// model AttributeValue {
//   id          Int    @id @default(autoincrement())
//   attributeId Int
//   value       String

//   attribute Attribute @relation(fields: [attributeId], references: [id], onDelete: Cascade)
// }

// model CategoryAttribute {
//   categoryId  Int
//   attributeId Int

//   category  Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
//   attribute Attribute @relation(fields: [attributeId], references: [id], onDelete: Cascade)

//   @@id([categoryId, attributeId]) // Clave primaria compuesta para relación muchos a muchos
// }

// model ProductAttribute {
//   id          Int    @id @default(autoincrement())
//   productId   Int
//   attributeId Int
//   value       String

//   product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
//   attribute Attribute @relation(fields: [attributeId], references: [id], onDelete: Cascade)

//   @@unique([productId, attributeId]) // Un producto solo puede tener un valor por atributo
// }
